{"version":3,"sources":["components/Node/Node.js","components/Navbars/Navbars.jsx","algorithms/BFS.jsx","algorithms/priortyQueue.jsx","algorithms/algorithmsHelper.jsx","algorithms/A_Star.jsx","algorithms/GreedyBestFirstSearch.jsx","components/PathFindingVisualizer/PathFindingVisualizer.jsx","algorithms/Dijkstra.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","isWeighted","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","React","Component","currentAlgo","wallOrWeight","digonalPath","Navbars","visualizeBfs","visualizeDijkstra","visualizeAStar","visualizeGreedyBFS","resetGrid","resetPath","resetWeight","useState","isRuning","setRuning","time","setTime","useEffect","Promise","resolve","setTimeout","algorithmCompletedTime","then","handleClick","Navbar","bg","variant","Brand","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","disabled","Item","onClick","algo","document","getElementById","innerHTML","Button","onBtnClick","Form","Check","type","label","style","row_queue","col_queue","updateUnvisitedNeibours","grid","forPathReconstruction","visitedNodesInOrder","at_row","at_col","direction_row","direction_col","i","length","neibours_row","neibours_col","isVisited","push","val","priorty","next","PriortyQueue","head","newNode","temp","dis","console","log","gridIndexToArrayIndex","totalCol","currentRow","currentCol","neiboursUnvisitedNode","direction","neibours","at","weight","heuristic","nodeOne","nodeTwo","Math","abs","STARTING_ROW","STARTING_COL","ENDING_ROW","ENDING_COL","getInitialGrid","createNode","previousNode","getNewGridWithWallToggled","newGrid","slice","node","getNewGridWithWeight","PathFindingVisualizer","state","resetWeights","querySelector","setState","resetPathAnimation","querySelectorAll","resetVisitedAnimation","classList","handleMouseDown","isStartSelected","isFinishSelected","mouseIsPressed","gird","handleMouseEnter","getNewGridWithNewStart","getNewGridWithNewFinish","handleMouseUp","startNode","endNode","TOTAL_NODE","openSet","forPathReconstruntion","Array","hScore","fill","Infinity","enqueue","dequeue","current","neb","new_hScore","GreedyBFS","nodesInShortestOrder","path","reverse","pathLength","getNodeInShortestPathOrderGreedyBFS","animateAlgo","gScore","fScore","new_gScore","A_Star","getNodesInShortestPathOrderAStar","dist","queue","index","idx","currDist","newDist","dijkstra","getNodesInShortestPathOrderDijkstra","visualizeBFS","shift","bfs","getNodesInShortestPathOrderBFS","animateShortestPath","map","rowIdx","key","nodeIdx","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d8b9f443.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Node.css\";\r\n\r\nconst a = '';\r\nclass Node extends React.Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      isWeighted,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : isWeighted\r\n      ? \"node-weight\"\r\n            : \"\";\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      >{a}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Navbars.css\";\r\n\r\nlet currentAlgo = \"\";\r\nexport let wallOrWeight = \"wall\";\r\nexport let digonalPath = false;\r\n\r\nfunction algorithmCompletedTime(time) {\r\n  return new Promise((resolve) => setTimeout(resolve, time));\r\n}\r\n\r\nexport const Navbars = ({\r\n  visualizeBfs,\r\n  visualizeDijkstra,\r\n  visualizeAStar,\r\n  visualizeGreedyBFS,\r\n  resetGrid,\r\n  resetPath,\r\n  resetWeight,\r\n}) => {\r\n\r\n  const [isRuning, setRuning] = useState(false);\r\n  const [time, setTime] = useState(0);\r\n\r\n  const onBtnClick = () => {\r\n    let time = 0;\r\n    if (currentAlgo === \"\") {\r\n      document.getElementById(\"Vizu\").innerHTML = \"Select Algorithm\";\r\n    } else if (currentAlgo === \"BFS\") {\r\n      resetPath();\r\n      resetWeight();\r\n      time = visualizeBfs();\r\n    } else if (currentAlgo === \"Dijkstra\") {\r\n      resetPath();\r\n      time = visualizeDijkstra();\r\n    } else if (currentAlgo === \"AStar\") {\r\n      resetPath();\r\n      time = visualizeAStar();\r\n    } else if (currentAlgo === \"GreedyBFS\") {\r\n      resetPath();\r\n      time = visualizeGreedyBFS();\r\n    }\r\n    setTime(time);\r\n  };\r\n  useEffect(() => {\r\n    if (isRuning) {\r\n      algorithmCompletedTime(time).then(() => {\r\n        setRuning(false);\r\n      });\r\n    }\r\n  }, [isRuning, time]);\r\n\r\n  const handleClick = () => setRuning(true);\r\n\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Brand>PathFinding Visulizer</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\" >\r\n          <NavDropdown title=\"Algorithm\" id=\"basic-nav-dropdown\" disabled={isRuning}>\r\n            <NavDropdown.Item\r\n              onClick={() => {\r\n                const algo = document.getElementById(\"Vizu\");\r\n                currentAlgo = \"Dijkstra\";\r\n                algo.innerHTML = \"Visualize Dijkstra Algrithm\";\r\n              }}\r\n            >\r\n              Dijkstra's Shortest Path\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item\r\n              onClick={() => {\r\n                const algo = document.getElementById(\"Vizu\");\r\n                currentAlgo = \"BFS\";\r\n                algo.innerHTML = \"Visualize BFS Algorithm (Unweighted)\";\r\n              }}\r\n            >\r\n              BFS Shortest Path\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item\r\n              onClick={() => {\r\n                const algo = document.getElementById(\"Vizu\");\r\n                currentAlgo = \"AStar\";\r\n                algo.innerHTML = \"Visualize A* Algorithm\";\r\n              }}\r\n            >\r\n              A* Shortest Path\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item\r\n              onClick={() => {\r\n                const algo = document.getElementById(\"Vizu\");\r\n                currentAlgo = \"GreedyBFS\";\r\n                algo.innerHTML = \"Visualize Greedy Algorithm\";\r\n              }}\r\n            >\r\n              Greedy Best First Search\r\n            </NavDropdown.Item>\r\n          </NavDropdown>\r\n          <Button\r\n            id=\"Vizu\"\r\n            className=\"btn\"\r\n            variant=\"info\"\r\n            disabled={isRuning}\r\n            onClick={() => {\r\n              onBtnClick();\r\n              handleClick();\r\n            }}\r\n          >\r\n            Algorithm\r\n          </Button>\r\n          <Button\r\n            id=\"resetGrid\"\r\n            className=\"btn\"\r\n            variant=\"info\"\r\n            disabled={isRuning}\r\n            onClick={() => {\r\n              resetGrid();\r\n              handleClick();\r\n            }}\r\n          >\r\n            Clear Grid\r\n          </Button>\r\n          <Button\r\n            id=\"resetPath\"\r\n            className=\"btn\"\r\n            variant=\"info\"\r\n            disabled={isRuning}\r\n            onClick={() => {\r\n              resetPath();\r\n              handleClick();\r\n            }}\r\n          >\r\n            Clear Path\r\n          </Button>\r\n          <NavDropdown title=\"Wall or Weight\" id=\"basic-nav-dropdown1\" disabled={isRuning}>\r\n            <NavDropdown.Item\r\n              onClick={() => {\r\n                wallOrWeight = \"wall\";\r\n              }}\r\n            >\r\n              Wall\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item\r\n              onClick={() => {\r\n                wallOrWeight = \"weight\";\r\n              }}\r\n            >\r\n              Weight\r\n            </NavDropdown.Item>\r\n          </NavDropdown>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n      <Form>\r\n        <Form.Check\r\n          type=\"switch\"\r\n          id=\"custom-switch\"\r\n          label={\r\n            <span style={{\"color\":\"white\"}}>Enable Digonal Path</span>\r\n          }\r\n          disabled={isRuning}\r\n          onClick={() => {\r\n            digonalPath = !digonalPath;\r\n          }}\r\n        />\r\n      </Form>\r\n    </Navbar>\r\n  );\r\n};\r\n","import { digonalPath } from \"../components/Navbars/Navbars\";\r\n\r\nconst [row_queue, col_queue] = [[], []];\r\n\r\nexport function bfs(grid, startNode) {\r\n  const forPathReconstruction = new Array(grid.length * grid[0].length);\r\n  const visitedNodesInOrder = [];\r\n  row_queue.push(startNode.row);\r\n  col_queue.push(startNode.col);\r\n  startNode.isVisited = true;\r\n  while (row_queue.length) {\r\n    let at_row = row_queue.shift();\r\n    let at_col = col_queue.shift();\r\n    if (grid[at_row][at_col].isFinish) {\r\n      break;\r\n    }\r\n    updateUnvisitedNeibours(\r\n      grid,\r\n      forPathReconstruction,\r\n      visitedNodesInOrder,\r\n      at_row,\r\n      at_col\r\n      );\r\n    }\r\n    return [visitedNodesInOrder, forPathReconstruction];\r\n  }\r\n  \r\n  function updateUnvisitedNeibours(\r\n    grid,\r\n    forPathReconstruction,\r\n    visitedNodesInOrder,\r\n    at_row,\r\n    at_col\r\n    ) {\r\n      let direction_row;\r\n      let direction_col;\r\n      if (digonalPath) {\r\n        direction_row = [-1, 1, 0, 0, -1, 1, -1, 1];\r\n        direction_col = [0, 0, 1, -1, -1, -1, 1, 1];\r\n      } else {\r\n        direction_row = [-1, 1, 0, 0];\r\n        direction_col = [0, 0, 1, -1];\r\n      }\r\n      for (let i = 0; i < direction_col.length; i++) {\r\n        let neibours_row = at_row + direction_row[i];\r\n        let neibours_col = at_col + direction_col[i];\r\n        if (\r\n          neibours_col < 0 ||\r\n          neibours_row < 0 ||\r\n          neibours_row >= grid.length ||\r\n          neibours_col >= grid[0].length\r\n        ) {\r\n          continue;\r\n        }\r\n        if (grid[neibours_row][neibours_col].isWall) {\r\n          continue;\r\n        }\r\n        if (!grid[neibours_row][neibours_col].isVisited) {\r\n          row_queue.push(neibours_row);\r\n          col_queue.push(neibours_col);\r\n          grid[neibours_row][neibours_col].isVisited = true;\r\n          forPathReconstruction[grid[0].length * neibours_row + neibours_col] =\r\n            grid[at_row][at_col];\r\n          // visitedNodesInOrder.push(grid[at_row][at_col]);\r\n        }\r\n        visitedNodesInOrder.push(grid[at_row][at_col]);\r\n      }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderBFS(\r\n  grid,\r\n  forPathReconstruction,\r\n  startNode,\r\n  endNode\r\n) {\r\n  const path = [];\r\n\tfor (\r\n    let i = endNode;\r\n    i != null;\r\n    i = forPathReconstruction[grid[0].length * i.row + i.col]\r\n\t) {\r\n    path.push(i);\r\n  }\r\n\tpath.reverse();\r\n  if (path[0] === startNode) {\r\n    console.log(\"BFS(Unweighted) Path Length: \", path.length)\r\n    return path;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\n\r\n","class Node {\r\n    constructor(val, priorty) {\r\n        this.val = val;\r\n        this.priorty = priorty;\r\n        this.next = null;\r\n    }\r\n}\r\n\r\nexport class PriortyQueue{\r\n    constructor(){\r\n        this.head = null;\r\n        this.length = 0;\r\n    }\r\n\r\n    enqueue(val, priorty){\r\n        const newNode = new Node(val, priorty);\r\n        let temp = this.head;\r\n        if(this.head === null){\r\n            this.head = newNode;\r\n        } else if(this.head.priorty > newNode.priorty){\r\n            this.head = newNode;\r\n            newNode.next = temp;\r\n        } else {\r\n            while (temp.next !== null && temp.next.priorty < newNode.priorty){\r\n                temp = temp.next;\r\n            }\r\n            newNode.next = temp.next;\r\n            temp.next = newNode;\r\n        }\r\n        this.length++;\r\n    }\r\n\r\n    dequeue(){\r\n        if(this.head === null){\r\n            return \r\n        }\r\n        const temp = this.head\r\n        this.head = this.head.next\r\n        temp.next = null;\r\n        this.length--;\r\n        return temp\r\n    }\r\n\r\n    display(){\r\n        const dis = []\r\n        let temp = this.head\r\n        while (temp !== null){\r\n            dis.push([temp.val, temp.priorty])\r\n            temp = temp.next\r\n        }\r\n        console.log(dis)\r\n    }\r\n}\r\n\r\n\r\n\r\n","import {digonalPath} from \"../components/Navbars/Navbars\";\r\n\r\nexport function gridIndexToArrayIndex(totalCol, currentRow, currentCol) {\r\n    return totalCol * currentRow + currentCol;\r\n}\r\n\r\nexport function neiboursUnvisitedNode(grid, val, visitedNodesInOrder) {\r\n  let direction;\r\n  if (digonalPath) {\r\n    direction = [\r\n      [-1, 0],\r\n      [0, -1],\r\n      [1, 0],\r\n      [0, 1],\r\n      [-1, -1],\r\n      [1, -1],\r\n      [-1, 1],\r\n      [1, 1],\r\n    ];\r\n  } else {\r\n      direction = [\r\n        [-1, 0],\r\n        [0, -1],\r\n        [1, 0],\r\n        [0, 1],\r\n      ];\r\n  \r\n  }\r\n    const neibours = [];\r\n    for (let i = 0; i < direction.length; i++) {\r\n      let at = [val[0] + direction[i][0], val[1] + direction[i][1]];\r\n      let weight;\r\n  \r\n      if (\r\n        at[0] < 0 ||\r\n        at[0] >= grid.length ||\r\n        at[1] >= grid[0].length ||\r\n        at[1] < 0\r\n      ) {\r\n        continue;\r\n      } else if (grid[at[0]][at[1]].isWall) {\r\n        continue;\r\n      } else if (grid[at[0]][at[1]].isWeighted) {\r\n        visitedNodesInOrder.push(grid[val[0]][val[1]]);\r\n          weight = 15;\r\n      } else {\r\n        visitedNodesInOrder.push(grid[val[0]][val[1]]);\r\n        weight = 1;\r\n      }\r\n      neibours.push([at, weight]);\r\n    }\r\n    return neibours;\r\n  }\r\n\r\n","import { PriortyQueue } from \"./priortyQueue\";\r\nimport {\r\n  gridIndexToArrayIndex,\r\n  neiboursUnvisitedNode,\r\n} from \"./algorithmsHelper\";\r\n\r\nfunction heuristic(nodeOne, nodeTwo) {\r\n  let manhattanDistance =\r\n    Math.abs(nodeOne[0] - nodeTwo[0]) + Math.abs(nodeOne[1] - nodeTwo[1]);\r\n  // let diagonalDistance = Math.max(Math.abs(nodeOne[0] - nodeTwo[0]), Math.abs(nodeOne[1] - nodeTwo[1]))\r\n  // let euclideanDistance = Math.sqrt(Math.pow((nodeOne[0] - nodeTwo[0]), 2) + Math.pow((nodeOne[1] - nodeTwo[1]), 2))\r\n  return manhattanDistance;\r\n}\r\n\r\nexport function A_Star(grid, startNode, endNode) {\r\n  const TOTAL_NODE = grid.length * grid[0].length;\r\n\r\n  const openSet = new PriortyQueue(); // queue\r\n  const forPathReconstruntion = new Array(TOTAL_NODE);\r\n  const visitedNodesInOrder = [];\r\n\r\n  const gScore = new Array(TOTAL_NODE).fill(Infinity);\r\n  gScore[\r\n    gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)\r\n  ] = 0;\r\n\r\n  const fScore = new Array(TOTAL_NODE).fill(Infinity);\r\n  fScore[gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)] =\r\n    gScore[\r\n      gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)\r\n    ] + heuristic([startNode.row, startNode.col], [endNode.row, endNode.col]);\r\n\r\n  openSet.enqueue(\r\n    [startNode.row, startNode.col],\r\n    fScore[gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)]\r\n  );\r\n\r\n  while (openSet.length) {\r\n    const { val } = openSet.dequeue();\r\n    if (grid[val[0]][val[1]].isVisited) {\r\n      continue\r\n    }\r\n    const current = val;\r\n    grid[current[0]][current[1]].isVisited = true;\r\n    \r\n    if (current[0] === endNode.row && current[1] === endNode.col) {\r\n      return [forPathReconstruntion, visitedNodesInOrder];\r\n    }\r\n    const neibours = neiboursUnvisitedNode(grid, current, visitedNodesInOrder);\r\n    for (let i = 0; i < neibours.length; i++) {\r\n      const [neb, weight] = neibours[i];\r\n      if (grid[neb[0]][neb[1]].isVisited) {\r\n        continue;\r\n      }\r\n      const new_gScore =\r\n        gScore[gridIndexToArrayIndex(grid[0].length, current[0], current[1])] +\r\n        weight;\r\n      if (\r\n        new_gScore <\r\n        gScore[gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])]\r\n      ) {\r\n        // visitedNodesInOrder.push(grid[current[0]][current[1]])\r\n        forPathReconstruntion[\r\n          gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])\r\n        ] = grid[current[0]][current[1]];\r\n        gScore[\r\n          gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])\r\n        ] = new_gScore;\r\n        fScore[gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])] =\r\n          gScore[gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])] +\r\n          heuristic(neb, [endNode.row, endNode.col]);\r\n        \r\n        if (!grid[neb[0]][neb[1]].isVisited) {\r\n          openSet.enqueue(\r\n            neb,\r\n            fScore[gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])]\r\n          );\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n  return [forPathReconstruntion, visitedNodesInOrder];\r\n}\r\n\r\nexport function getNodesInShortestPathOrderAStar(\r\n  grid,\r\n  forPathReconstruntion,\r\n  startNode,\r\n  endNode\r\n) {\r\n  const path = [];\r\n  for (\r\n    let i = endNode;\r\n    i != null;\r\n    i =\r\n      forPathReconstruntion[gridIndexToArrayIndex(grid[0].length, i.row, i.col)]\r\n  ) {\r\n    path.push(i);\r\n  }\r\n  path.reverse();\r\n  let pathLength = 0;\r\n  for (let i = 0; i < path.length; i++) {\r\n    if (grid[path[i].row][path[i].col].isWeighted) {\r\n      pathLength = pathLength + 15;\r\n    } else {\r\n      pathLength = pathLength + 1;\r\n    }\r\n  }\r\n  if (path[0] === startNode) {\r\n    console.log(\"A_Star Path Length: \", pathLength);\r\n    return path;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n","import { PriortyQueue } from \"./priortyQueue\";\nimport {\n  gridIndexToArrayIndex,\n  neiboursUnvisitedNode,\n} from \"./algorithmsHelper\";\n\nfunction heuristic(nodeOne, nodeTwo) {\n  let manhattanDistance =\n    Math.abs(nodeOne[0] - nodeTwo[0]) + Math.abs(nodeOne[1] - nodeTwo[1]);\n  return manhattanDistance;\n}\n\nexport function GreedyBFS(grid, startNode, endNode) {\n  const TOTAL_NODE = grid.length * grid[0].length;\n\n  const openSet = new PriortyQueue();\n  const forPathReconstruntion = new Array(TOTAL_NODE);\n  const visitedNodesInOrder = [];\n\n  const hScore = new Array(TOTAL_NODE).fill(Infinity);\n  hScore[\n    gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)\n  ] = heuristic([startNode.row, startNode.col], [endNode.row, endNode.col]);\n\n  openSet.enqueue(\n    [startNode.row, startNode.col],\n    hScore[gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)]\n  );\n\n  while (openSet.length) {\n    const { val } = openSet.dequeue();\n    if (grid[val[0]][val[1]].isVisited) {\n      continue;\n    }\n    const current = val;\n    grid[current[0]][current[1]].isVisited = true;\n\n    if (current[0] === endNode.row && current[1] === endNode.col) {\n      return [forPathReconstruntion, visitedNodesInOrder];\n    }\n\n    const neibours = neiboursUnvisitedNode(grid, current, visitedNodesInOrder);\n    for (let i = 0; i < neibours.length; i++) {\n      const [neb, weight] = neibours[i];\n\n      if (grid[neb[0]][neb[1]].isVisited) {\n        continue;\n      }\n      const new_hScore = heuristic(neb, [endNode.row, endNode.col]) + weight;\n      if (\n        new_hScore <\n        hScore[gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])]\n      ) {\n        forPathReconstruntion[\n          gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])\n        ] = grid[current[0]][current[1]];\n        hScore[gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])] = new_hScore\n        if (!grid[neb[0]][neb[1]].isVisited) {\n          openSet.enqueue(neb, new_hScore);\n        }\n      }\n    }\n  }\n  return [forPathReconstruntion, visitedNodesInOrder];\n}\n\nexport function getNodeInShortestPathOrderGreedyBFS(\n  grid,\n  forPathReconstruntion,\n  startNode,\n  endNode\n) {\n  const path = [];\n  for (\n    let i = endNode;\n    i != null;\n    i =\n      forPathReconstruntion[gridIndexToArrayIndex(grid[0].length, i.row, i.col)]\n  ) {\n    path.push(i);\n  }\n  path.reverse();\n  let pathLength = 0;\n  for (let i = 0; i < path.length; i++) {\n    if (grid[path[i].row][path[i].col].isWeighted) {\n      pathLength = pathLength + 15;\n    } else {\n      pathLength = pathLength + 1;\n    }\n  }\n  if (path[0] === startNode) {\n    console.log(\"GreedyBFS Path Length: \", pathLength);\n    return path;\n  } else {\n    return [];\n  }\n}\n","import React from \"react\";\r\nimport Node from \"../Node/Node\";\r\nimport { Navbars, wallOrWeight} from \"../Navbars/Navbars\";\r\nimport { bfs, getNodesInShortestPathOrderBFS } from \"../../algorithms/BFS\";\r\nimport {\r\n  dijkstra,\r\n  getNodesInShortestPathOrderDijkstra,\r\n} from \"../../algorithms/Dijkstra\";\r\nimport {\r\n  A_Star,\r\n  getNodesInShortestPathOrderAStar,\r\n} from \"../../algorithms/A_Star\";\r\nimport {GreedyBFS, getNodeInShortestPathOrderGreedyBFS} from \"../../algorithms/GreedyBestFirstSearch\"\r\n\r\nimport \"./PathFindingVisualizer.css\";\r\n\r\nconst TOTAL_ROW = 31;\r\nconst TOTAL_COL = 56;\r\n\r\nlet STARTING_ROW = 15;\r\nlet STARTING_COL = 5;\r\n\r\nlet ENDING_ROW = 15;\r\nlet ENDING_COL = 50;\r\n\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < TOTAL_ROW; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < TOTAL_COL; col++) {\r\n      currentRow.push(createNode(row, col));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  \r\n  return grid;\r\n};\r\n\r\nconst createNode = (row, col) => {\r\n  \r\n  return {\r\n    row,\r\n    col,\r\n    isStart: row === STARTING_ROW && col === STARTING_COL,\r\n    isFinish: row === ENDING_ROW && col === ENDING_COL,\r\n    isWeighted: false,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithWeight = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = { ...node, isWeighted: !node.isWeighted }\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n}\r\n\r\nconst getNewGridWithNewStart = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = { ...node, isStart: !node.isStart };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithNewFinish = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = { ...node, isFinish: !node.isFinish };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nclass PathFindingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      isStartSelected: [[STARTING_ROW, STARTING_COL], false],\r\n      isFinishSelected: [[ENDING_ROW, ENDING_COL], false],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  resetWeight = () => {\r\n    const { grid } = this.state\r\n    for (let row = 0; row < TOTAL_ROW; row++){\r\n      for (let col = 0; col < TOTAL_COL; col++){\r\n        grid[row][col].isWeighted = false;\r\n      }\r\n    }\r\n    let resetWeights = document.querySelector(\".node-weight\")\r\n    if (resetWeights === null) {\r\n      resetWeights = []\r\n    }\r\n    for (let i = 0; i < resetWeights.length; i++){\r\n      resetWeights[i].className = \"node\";\r\n    }\r\n    this.setState({ grid })\r\n  }\r\n  resetPath = () => {\r\n    const { grid } = this.state;\r\n    for (let row = 0; row < TOTAL_ROW; row++) {\r\n      for (let col = 0; col < TOTAL_COL; col++) {\r\n        grid[row][col].isVisited = false;\r\n      }\r\n    }\r\n    const resetPathAnimation = document.querySelectorAll(\".node-shortest-path\");\r\n    const resetVisitedAnimation = document.querySelectorAll(\".node-visited\");\r\n    for (let i = 0; i < resetVisitedAnimation.length; i++) {\r\n      if (resetVisitedAnimation[i].classList[2] === \"node-weight\") {\r\n        resetVisitedAnimation[i].className = \"node node-weight\";\r\n      } else {\r\n        resetVisitedAnimation[i].className = \"node\";\r\n      }\r\n    }\r\n    for (let i = 0; i < resetPathAnimation.length; i++) {\r\n      if (resetPathAnimation[i].classList[2] === \"node-weight\") {\r\n        resetPathAnimation[i].className = \"node node-weight\";\r\n      } else {\r\n        resetPathAnimation[i].className = \"node\";\r\n      }\r\n    }\r\n\r\n    document.getElementById(`node-${STARTING_ROW}-${STARTING_COL}`).className =\r\n      \"node node-start\";\r\n    document.getElementById(`node-${ENDING_ROW}-${ENDING_COL}`).className =\r\n      \"node node-finish\";\r\n  };\r\n\r\n  resetGrid = () => {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n    this.resetPath();\r\n  };\r\n\r\n  handleMouseDown = (row, col) => {\r\n    if (this.state.grid[row][col].isStart) {\r\n      this.setState({ isStartSelected: [[STARTING_ROW, STARTING_COL], true] });\r\n    } else if (this.state.grid[row][col].isFinish) {\r\n      this.setState({ isFinishSelected: [[ENDING_ROW, ENDING_COL], true] });\r\n    } else if (wallOrWeight === \"wall\") {\r\n      if (!this.state.grid[row][col].isFinish) {\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid, mouseIsPressed: true });\r\n      }\r\n    } else if (wallOrWeight === \"weight\") {\r\n      if (!this.state.grid[row][col].isFinish) {\r\n        const newGrid = getNewGridWithWeight(this.state.grid, row, col);\r\n        this.setState({ gird: newGrid, mouseIsPressed: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleMouseEnter = (row, col) => {\r\n    if (this.state.isStartSelected[1]) {\r\n      const { grid, isStartSelected } = this.state;\r\n      grid[isStartSelected[0][0]][isStartSelected[0][1]].isStart = false;\r\n      grid[isStartSelected[0][0]][isStartSelected[0][1]].isWall = false;\r\n      grid[isStartSelected[0][0]][isStartSelected[0][1]].isWeighted = false;\r\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\r\n      STARTING_COL = col;\r\n      STARTING_ROW = row;\r\n      this.setState({\r\n        grid: newGrid,\r\n        isStartSelected: [[STARTING_ROW, STARTING_COL], true],\r\n      });\r\n    } else if (this.state.isFinishSelected[1]) {\r\n      const { grid, isFinishSelected } = this.state;\r\n      grid[isFinishSelected[0][0]][isFinishSelected[0][1]].isFinish = false;\r\n      grid[isFinishSelected[0][0]][isFinishSelected[0][1]].isWall = false;\r\n      grid[isFinishSelected[0][0]][isFinishSelected[0][1]].isWeighted = false;\r\n      const newGrid = getNewGridWithNewFinish(this.state.grid, row, col);\r\n      ENDING_COL = col;\r\n      ENDING_ROW = row;\r\n      this.setState({\r\n        grid: newGrid,\r\n        isFinishSelected: [[ENDING_ROW, ENDING_COL], true],\r\n      });\r\n    } else if (wallOrWeight === \"wall\") {\r\n      if (this.state.mouseIsPressed && !this.state.grid[row][col].isFinish) {\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid });\r\n      }\r\n    } else if (wallOrWeight === \"weight\") {\r\n      if (this.state.mouseIsPressed && !this.state.grid[row][col].isFinish) {\r\n        const newGrid = getNewGridWithWeight(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    this.setState({\r\n      mouseIsPressed: false,\r\n      isStartSelected: [[STARTING_ROW, STARTING_COL], false],\r\n      isFinishSelected: [[ENDING_ROW, ENDING_COL], false],\r\n    });\r\n  };\r\n\r\n  animateShortestPath(nodesInShortestOrder) {\r\n    for (let i = 0; i < nodesInShortestOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n        if (node.isWeighted) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path node-weight\";\r\n        }\r\n        if (node.isStart) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path node-start\";\r\n        } else if (node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path node-finish\";\r\n        }\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  animateAlgo(visitedNodesInOrder, nodesInShortestOrder) {\r\n    let time = 0;\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      \r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestOrder);\r\n        }, 5 * i);\r\n        time = time + (50 * nodesInShortestOrder.length);\r\n        return time;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        setTimeout(() => {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visited\";\r\n          if (node.isWeighted) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node node-visited node-weight\";\r\n          }\r\n          if (node.isStart) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node node-shortest-path node-start\";\r\n          } else if (node.isFinish) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node node-shortest-path node-finish\";\r\n          }\r\n        }, 5);\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-at\";\r\n      }, 5 * i);\r\n      time = time + 5;\r\n    }\r\n    \r\n  }\r\n\r\n  visualizeGreedyBFS = () => {\r\n    \r\n    let { grid } = this.state;\r\n    const startNode = grid[STARTING_ROW][STARTING_COL];\r\n    const endNode = grid[ENDING_ROW][ENDING_COL]\r\n    const [forPathReconstruction, visitedNodesInOrder] = GreedyBFS(grid, startNode, endNode)\r\n    const nodesInShortestOrder = getNodeInShortestPathOrderGreedyBFS(\r\n      grid,\r\n      forPathReconstruction,\r\n      startNode,\r\n      endNode\r\n    );\r\n    const timeTaken = this.animateAlgo(visitedNodesInOrder, nodesInShortestOrder);\r\n    return timeTaken\r\n  }\r\n\r\n  visualizeAStar = () => {\r\n    let { grid } = this.state;\r\n    const startNode = grid[STARTING_ROW][STARTING_COL];\r\n    const endNode = grid[ENDING_ROW][ENDING_COL];\r\n\r\n    const [forPathReconstruction, visitedNodesInOrder] = A_Star(\r\n      grid,\r\n      startNode,\r\n      endNode\r\n    );\r\n    const nodesInShortestOrder = getNodesInShortestPathOrderAStar(\r\n      grid,\r\n      forPathReconstruction,\r\n      startNode,\r\n      endNode\r\n    );\r\n    const timeTaken = this.animateAlgo(visitedNodesInOrder, nodesInShortestOrder);\r\n    return timeTaken\r\n  };\r\n  visualizeDijkstra = () => {\r\n    let { grid } = this.state;\r\n    const startNode = grid[STARTING_ROW][STARTING_COL];\r\n    const endNode = grid[ENDING_ROW][ENDING_COL];\r\n    const [dist, forPathReconstruction, visitedNodesInOrder] = dijkstra(\r\n      grid,\r\n      startNode\r\n    );\r\n    // console.log([dist, forPathReconstruction, visitedNodesInOrder])\r\n    const nodesInShortestOrder = getNodesInShortestPathOrderDijkstra(\r\n      grid,\r\n      dist,\r\n      forPathReconstruction,\r\n      startNode,\r\n      endNode\r\n    );\r\n    const timeTaken = this.animateAlgo(visitedNodesInOrder, nodesInShortestOrder);\r\n    return timeTaken;\r\n  };\r\n\r\n  visualizeBFS = () => {\r\n    \r\n    let { grid } = this.state;\r\n    const startNode = grid[STARTING_ROW][STARTING_COL];\r\n    const endNode = grid[ENDING_ROW][ENDING_COL];\r\n    const [visitedNodesInOrder, forPathReconstruction] = bfs(grid, startNode);\r\n    const nodesInShortestOrder = getNodesInShortestPathOrderBFS(\r\n      grid,\r\n      forPathReconstruction,\r\n      startNode,\r\n      endNode\r\n    );\r\n    const timeTaken = this.animateAlgo(visitedNodesInOrder, nodesInShortestOrder);\r\n    return timeTaken;\r\n  };\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <div>\r\n        <Navbars\r\n          visualizeBfs={this.visualizeBFS}\r\n          visualizeDijkstra={this.visualizeDijkstra}\r\n          visualizeAStar={this.visualizeAStar}\r\n          visualizeGreedyBFS={this.visualizeGreedyBFS}\r\n          resetGrid={this.resetGrid}\r\n          resetPath={this.resetPath}\r\n          resetWeight={this.resetWeight}\r\n        ></Navbars>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {\r\n                    row,\r\n                    col,\r\n                    isStart,\r\n                    isFinish,\r\n                    isWall,\r\n                    isWeighted,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isWall={isWall}\r\n                      isWeighted={isWeighted}\r\n                      onMouseDown={this.handleMouseDown}\r\n                      onMouseEnter={this.handleMouseEnter}\r\n                      onMouseUp={this.handleMouseUp}\r\n                      row={row}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PathFindingVisualizer;\r\n","import { PriortyQueue } from \"./priortyQueue\";\r\nimport {\r\n  gridIndexToArrayIndex,\r\n  neiboursUnvisitedNode,\r\n} from \"./algorithmsHelper\";\r\n\r\n\r\nexport function dijkstra(grid, startNode) {\r\n  const forPathReconstruction = new Array(grid.length * grid[0].length);\r\n  const visitedNodesInOrder = [];\r\n\r\n  const dist = new Array(grid.length * grid[0].length).fill(Infinity);\r\n  dist[gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)] = 0;\r\n  const queue = new PriortyQueue();\r\n  queue.enqueue([startNode.row, startNode.col], 0);\r\n  while (queue.length) {\r\n    let { val, priorty } = queue.dequeue();\r\n    let index = gridIndexToArrayIndex(grid[0].length, val[0], val[1]);\r\n    grid[val[0]][val[1]].isVisited = true;\r\n    if (grid[val[0]][val[1]].isFinish) {\r\n      return [dist, forPathReconstruction, visitedNodesInOrder];\r\n    }\r\n    if (dist[index] < priorty) {\r\n      continue;\r\n    }\r\n\r\n    let neibours = neiboursUnvisitedNode(grid, val, visitedNodesInOrder);\r\n    for (let i = 0; i < neibours.length; i++) {\r\n      let [idx, currDist] = neibours[i];\r\n      let at = gridIndexToArrayIndex(grid[0].length, idx[0], idx[1]);\r\n      if (grid[idx[0]][idx[1]].isVisited) {\r\n        continue;\r\n      }\r\n      let newDist = dist[index] + currDist;\r\n      if (newDist < dist[at]) {\r\n        forPathReconstruction[at] = grid[val[0]][val[1]];\r\n        visitedNodesInOrder.push(grid[val[0]][val[1]]);\r\n        dist[at] = newDist;\r\n        queue.enqueue(idx, newDist);\r\n      }\r\n    }\r\n  }\r\n  return [dist, forPathReconstruction, visitedNodesInOrder];\r\n}\r\n\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(\r\n  grid,\r\n  dist,\r\n  forPathReconstruction,\r\n  startNode,\r\n  endNode\r\n) {\r\n  const at = gridIndexToArrayIndex(grid[0].length, endNode[0], endNode[1]);\r\n  if (dist[at] === Infinity) {\r\n    return [];\r\n  }\r\n  const path = [];\r\n  for (\r\n    let i = endNode;\r\n    i != null;\r\n    i =\r\n   \r\n        forPathReconstruction[gridIndexToArrayIndex(grid[0].length, i.row, i.col)]\r\n  ) {\r\n    path.push(i);\r\n  }\r\n  path.reverse();\r\n  let pathLength = 0;\r\n  for (let i = 0; i < path.length; i++) {\r\n    if (grid[path[i].row][path[i].col].isWeighted) {\r\n      pathLength = pathLength + 15;\r\n    } else {\r\n      pathLength = pathLength + 1;\r\n    }\r\n  }\r\n  if (path[0] === startNode) {\r\n    console.log(\"Dijkstra Path Length: \", pathLength)\r\n    return path;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n","import React from 'react';\nimport PathFindingVisualizer from './components/PathFindingVisualizer/PathFindingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFindingVisualizer></PathFindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
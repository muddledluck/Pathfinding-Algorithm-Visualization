{"version":3,"sources":["components/Node/Node.js","components/Navbars/Navbars.jsx","algorithms/BFS.jsx","algorithms/priortyQueue.jsx","algorithms/algorithmsHelper.jsx","algorithms/A_Star.jsx","components/PathFindingVisualizer/PathFindingVisualizer.jsx","algorithms/Dijkstra.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","isWeighted","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","React","Component","currentAlgo","wallOrWeight","Navbars","visualizeBfs","visualizeDijkstra","visualizeAStar","resetGrid","resetPath","resetWeight","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","Item","onClick","algo","document","getElementById","innerHTML","Button","variant","direction_row","direction_col","row_queue","col_queue","updateUnvisitedNeibours","grid","forPathReconstruction","visitedNodesInOrder","at_row","at_col","i","neibours_row","neibours_col","length","isVisited","push","val","priorty","next","PriortyQueue","head","newNode","temp","dis","console","log","gridIndexToArrayIndex","totalCol","currentRow","currentCol","neiboursUnvisitedNode","direction","neibours","at","weight","heuristic","nodeOne","nodeTwo","Math","abs","getInitialGrid","createNode","previousNode","getNewGridWithWallToggled","newGrid","slice","node","getNewGridWithWeight","PathFindingVisualizer","state","resetWeights","querySelector","setState","resetPathAnimation","querySelectorAll","resetVisitedAnimation","classList","handleMouseDown","mouseIsPressed","gird","handleMouseEnter","handleMouseUp","startNode","endNode","TOTAL_NODE","openSet","forPathReconstruntion","Array","gScore","fill","Infinity","fScore","enqueue","dequeue","current","neb","new_gScore","A_Star","nodesInShortestOrder","path","reverse","getNodesInShortestPathOrderAStar","animateAlgo","dist","queue","index","idx","currDist","newDist","dijkstra","getNodesInShortestPathOrderDijkstra","visualizeBFS","shift","bfs","getNodesInShortestPathOrderBFS","setTimeout","animateShortestPath","map","rowIdx","key","nodeIdx","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47a6fa98.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Node.css\";\r\n\r\nconst a = '';\r\nclass Node extends React.Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      isWeighted,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : isWeighted\r\n      ? \"node-weight\"\r\n            : \"\";\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      >{a}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Navbars.css\";\r\n\r\nlet currentAlgo = \"\";\r\nexport let wallOrWeight = \"wall\";\r\nexport const Navbars = ({\r\n  visualizeBfs,\r\n  visualizeDijkstra,\r\n  visualizeAStar,\r\n  resetGrid,\r\n  resetPath,\r\n  resetWeight,\r\n}) => {\r\n  return (\r\n    <Navbar bg=\"primary\" expand=\"lg\">\r\n      <Navbar.Brand>PathFinding Visulizer</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <NavDropdown title=\"Algorithm\" id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item\r\n              onClick={() => {\r\n                const algo = document.getElementById(\"Vizu\");\r\n                currentAlgo = \"Dijkstra\";\r\n                algo.innerHTML = \"Visualize Dijkstra Algrithm\";\r\n              }}\r\n            >\r\n              Dijkstra's Shortest Path\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item\r\n              onClick={() => {\r\n                const algo = document.getElementById(\"Vizu\");\r\n                currentAlgo = \"BFS\";\r\n                algo.innerHTML = \"Visualize BFS Algorithm (Unweighted)\";\r\n              }}\r\n            >\r\n              BFS Shortest Path\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item\r\n              onClick={() => {\r\n                const algo = document.getElementById(\"Vizu\");\r\n                currentAlgo = \"AStar\";\r\n                algo.innerHTML = \"Visualize A* Algorithm\";\r\n              }}\r\n            >\r\n              A* Shortest Path\r\n            </NavDropdown.Item>\r\n          </NavDropdown>\r\n          <Button\r\n            id=\"Vizu\"\r\n            className=\"btn\"\r\n            variant=\"info\"\r\n            onClick={() => {\r\n              if (currentAlgo === \"\") {\r\n                document.getElementById(\"Vizu\").innerHTML = \"Select Algorithm\";\r\n              } else if (currentAlgo === \"BFS\") {\r\n                resetPath();\r\n                resetWeight();\r\n                visualizeBfs();\r\n              } else if (currentAlgo === \"Dijkstra\") {\r\n                resetPath();\r\n                visualizeDijkstra();\r\n              } else if (currentAlgo === \"AStar\") {\r\n                resetPath();\r\n                visualizeAStar();\r\n              }\r\n            }}\r\n          >\r\n            Algorithm\r\n          </Button>\r\n          <Button\r\n\r\n\r\n\r\n\r\n                                                        id=\"resetGrid\"\r\n\r\n\r\n\r\n\r\n                                                        className=\"btn\"\r\n\r\n\r\n\r\n\r\n                                                        variant=\"info\"\r\n\r\n\r\n\r\n\r\n                                                        onClick={() => resetGrid()}\r\n          \r\n          \r\n          \r\n          \r\n          >\r\n            Clear Grid\r\n          </Button>\r\n          <Button\r\n           \r\n           \r\n           \r\n           \r\n            id=\"resetPath\"\r\n           \r\n           \r\n           \r\n           \r\n            className=\"btn\"\r\n           \r\n           \r\n           \r\n           \r\n            variant=\"info\"\r\n           \r\n           \r\n           \r\n           \r\n            onClick={() => resetPath()}\r\n          \r\n          \r\n          \r\n          \r\n          >\r\n            Clear Path\r\n          </Button>\r\n          <NavDropdown title=\"Wall or Weight\" id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item\r\n              onClick={() => {\r\n                wallOrWeight = \"wall\";\r\n              }}\r\n            >\r\n              Wall\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item\r\n              onClick={() => {\r\n                wallOrWeight = \"weight\";\r\n              }}\r\n            >\r\n              Weight\r\n            </NavDropdown.Item>\r\n          </NavDropdown>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n","const direction_row = [-1, 1, 0, 0];\r\nconst direction_col = [0, 0, 1, -1];\r\n\r\nconst [row_queue, col_queue] = [[], []];\r\n\r\nexport function bfs(grid, startNode) {\r\n  const forPathReconstruction = new Array(grid.length * grid[0].length);\r\n  const visitedNodesInOrder = [];\r\n  row_queue.push(startNode.row);\r\n  col_queue.push(startNode.col);\r\n  startNode.isVisited = true;\r\n  while (row_queue.length) {\r\n    let at_row = row_queue.shift();\r\n    let at_col = col_queue.shift();\r\n    if (grid[at_row][at_col].isFinish) {\r\n      break;\r\n    }\r\n    updateUnvisitedNeibours(\r\n      grid,\r\n      forPathReconstruction,\r\n      visitedNodesInOrder,\r\n      at_row,\r\n      at_col\r\n    );\r\n\t}\r\n  return [visitedNodesInOrder, forPathReconstruction];\r\n}\r\n\r\nfunction updateUnvisitedNeibours(\r\n  grid,\r\n  forPathReconstruction,\r\n  visitedNodesInOrder,\r\n  at_row,\r\n  at_col\r\n) {\r\n  for (let i = 0; i < 4; i++) {\r\n    let neibours_row = at_row + direction_row[i];\r\n    let neibours_col = at_col + direction_col[i];\r\n    if (\r\n      neibours_col < 0 ||\r\n      neibours_row < 0 ||\r\n      neibours_row >= grid.length ||\r\n      neibours_col >= grid[0].length\r\n    ) {\r\n      continue;\r\n    }\r\n    if (grid[neibours_row][neibours_col].isWall) {\r\n      continue;\r\n    }\r\n    if (!grid[neibours_row][neibours_col].isVisited) {\r\n      row_queue.push(neibours_row);\r\n\t\t\tcol_queue.push(neibours_col);\r\n\t\t\tgrid[neibours_row][neibours_col].isVisited = true;\r\n      forPathReconstruction[grid[0].length * neibours_row + neibours_col] =\r\n        grid[at_row][at_col];\r\n      // visitedNodesInOrder.push(grid[at_row][at_col]);\r\n    }\r\n    visitedNodesInOrder.push(grid[at_row][at_col]);\r\n  }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderBFS(\r\n  grid,\r\n  forPathReconstruction,\r\n  startNode,\r\n  endNode\r\n) {\r\n  const path = [];\r\n\tfor (\r\n    let i = endNode;\r\n    i != null;\r\n    i = forPathReconstruction[grid[0].length * i.row + i.col]\r\n\t) {\r\n    path.push(i);\r\n  }\r\n\tpath.reverse();\r\n  if (path[0] === startNode) {\r\n    console.log(\"BFS(Unweighted) Path Length: \", path.length)\r\n    return path;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\n\r\n","class Node {\r\n    constructor(val, priorty) {\r\n        this.val = val;\r\n        this.priorty = priorty;\r\n        this.next = null;\r\n    }\r\n}\r\n\r\nexport class PriortyQueue{\r\n    constructor(){\r\n        this.head = null;\r\n        this.length = 0;\r\n    }\r\n\r\n    enqueue(val, priorty){\r\n        const newNode = new Node(val, priorty);\r\n        let temp = this.head;\r\n        if(this.head === null){\r\n            this.head = newNode;\r\n        } else if(this.head.priorty > newNode.priorty){\r\n            this.head = newNode;\r\n            newNode.next = temp;\r\n        } else {\r\n            while (temp.next !== null && temp.next.priorty < newNode.priorty){\r\n                temp = temp.next;\r\n            }\r\n            newNode.next = temp.next;\r\n            temp.next = newNode;\r\n        }\r\n        this.length++;\r\n    }\r\n\r\n    dequeue(){\r\n        if(this.head === null){\r\n            return \r\n        }\r\n        const temp = this.head\r\n        this.head = this.head.next\r\n        temp.next = null;\r\n        this.length--;\r\n        return temp\r\n    }\r\n\r\n    display(){\r\n        const dis = []\r\n        let temp = this.head\r\n        while (temp !== null){\r\n            dis.push([temp.val, temp.priorty])\r\n            temp = temp.next\r\n        }\r\n        console.log(dis)\r\n    }\r\n}\r\n\r\n\r\n\r\n","export function gridIndexToArrayIndex(totalCol, currentRow, currentCol) {\r\n    return totalCol * currentRow + currentCol;\r\n}\r\n\r\nexport function neiboursUnvisitedNode(grid, val, visitedNodesInOrder) {\r\n    const direction = [\r\n      [-1, 0],\r\n      [0, -1],\r\n      [1, 0],\r\n      [0, 1],\r\n    ];\r\n    const neibours = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      let at = [val[0] + direction[i][0], val[1] + direction[i][1]];\r\n      let weight;\r\n  \r\n      if (\r\n        at[0] < 0 ||\r\n        at[0] >= grid.length ||\r\n        at[1] >= grid[0].length ||\r\n        at[1] < 0\r\n      ) {\r\n        continue;\r\n      } else if (grid[at[0]][at[1]].isWall) {\r\n        continue;\r\n      } else if (grid[at[0]][at[1]].isWeighted) {\r\n        visitedNodesInOrder.push(grid[val[0]][val[1]]);\r\n          weight = 15;\r\n      } else {\r\n        visitedNodesInOrder.push(grid[val[0]][val[1]]);\r\n        weight = 1;\r\n      }\r\n      neibours.push([at, weight]);\r\n    }\r\n    return neibours;\r\n  }\r\n\r\n","import { PriortyQueue } from \"./priortyQueue\";\r\nimport {\r\n  gridIndexToArrayIndex,\r\n  neiboursUnvisitedNode,\r\n} from \"./algorithmsHelper\";\r\n\r\nfunction heuristic(nodeOne, nodeTwo) {\r\n  let manhattanDistance =\r\n    Math.abs(nodeOne[0] - nodeTwo[0]) + Math.abs(nodeOne[1] - nodeTwo[1]);\r\n  // let diagonalDistance = Math.max(Math.abs(nodeOne[0] - nodeTwo[0]), Math.abs(nodeOne[1] - nodeTwo[1]))\r\n  // let euclideanDistance = Math.sqrt(Math.pow((nodeOne[0] - nodeTwo[0]), 2) + Math.pow((nodeOne[1] - nodeTwo[1]), 2))\r\n  return manhattanDistance;\r\n}\r\n\r\nexport function A_Star(grid, startNode, endNode) {\r\n  const TOTAL_NODE = grid.length * grid[0].length;\r\n\r\n  const openSet = new PriortyQueue(); // queue\r\n  const forPathReconstruntion = new Array(TOTAL_NODE);\r\n  const visitedNodesInOrder = [];\r\n\r\n  const gScore = new Array(TOTAL_NODE).fill(Infinity);\r\n  gScore[\r\n    gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)\r\n  ] = 0;\r\n\r\n  const fScore = new Array(TOTAL_NODE).fill(Infinity);\r\n  fScore[gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)] =\r\n    gScore[\r\n      gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)\r\n    ] + heuristic([startNode.row, startNode.col], [endNode.row, endNode.col]);\r\n\r\n  openSet.enqueue([startNode.row, startNode.col], fScore[0]);\r\n\r\n  while (openSet.length) {\r\n    const { val } = openSet.dequeue();\r\n    if (grid[val[0]][val[1]].isVisited) {\r\n      continue\r\n    }\r\n    const current = val;\r\n    grid[current[0]][current[1]].isVisited = true;\r\n    \r\n    if (current[0] === endNode.row && current[1] === endNode.col) {\r\n      return [forPathReconstruntion, visitedNodesInOrder];\r\n    }\r\n    const neibours = neiboursUnvisitedNode(grid, current, visitedNodesInOrder);\r\n    for (let i = 0; i < neibours.length; i++) {\r\n      const [neb, weight] = neibours[i];\r\n      if (grid[neb[0]][neb[1]].isVisited) {\r\n        continue;\r\n      }\r\n      const new_gScore =\r\n        gScore[gridIndexToArrayIndex(grid[0].length, current[0], current[1])] +\r\n        weight;\r\n      if (\r\n        new_gScore <\r\n        gScore[gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])]\r\n      ) {\r\n        // visitedNodesInOrder.push(grid[current[0]][current[1]])\r\n        forPathReconstruntion[\r\n          gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])\r\n        ] = grid[current[0]][current[1]];\r\n        gScore[\r\n          gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])\r\n        ] = new_gScore;\r\n        fScore[gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])] =\r\n          gScore[gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])] +\r\n          heuristic(neb, [endNode.row, endNode.col]);\r\n        \r\n        if (!grid[neb[0]][neb[1]].isVisited) {\r\n          openSet.enqueue(\r\n            neb,\r\n            fScore[gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])]\r\n          );\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n  return [forPathReconstruntion, visitedNodesInOrder];\r\n}\r\n\r\nexport function getNodesInShortestPathOrderAStar(\r\n  grid,\r\n  forPathReconstruntion,\r\n  startNode,\r\n  endNode\r\n) {\r\n  const path = [];\r\n  for (\r\n    let i = endNode;\r\n    i != null;\r\n    i =\r\n      forPathReconstruntion[gridIndexToArrayIndex(grid[0].length, i.row, i.col)]\r\n  ) {\r\n    path.push(i);\r\n  }\r\n  path.reverse();\r\n  if (path[0] === startNode) {\r\n    console.log(\"A_Star Path Length: \",path.length)\r\n    return path;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Node from \"../Node/Node\";\r\nimport { Navbars, wallOrWeight} from \"../Navbars/Navbars\";\r\nimport { bfs, getNodesInShortestPathOrderBFS } from \"../../algorithms/BFS\";\r\nimport {\r\n  dijkstra,\r\n  getNodesInShortestPathOrderDijkstra,\r\n} from \"../../algorithms/Dijkstra\";\r\nimport {\r\n  A_Star,\r\n  getNodesInShortestPathOrderAStar,\r\n} from \"../../algorithms/A_Star\";\r\n\r\nimport \"./PathFindingVisualizer.css\";\r\n\r\nconst TOTAL_ROW = 26;\r\nconst TOTAL_COL = 56;\r\n\r\nconst STARTING_ROW = 13;\r\nconst STARTING_COL = 10;\r\n\r\nconst ENDING_ROW = 13;\r\nconst ENDING_COL = 45;\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < TOTAL_ROW; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < TOTAL_COL; col++) {\r\n      currentRow.push(createNode(row, col));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  \r\n  return grid;\r\n};\r\n\r\nconst createNode = (row, col) => {\r\n  \r\n  return {\r\n    row,\r\n    col,\r\n    isStart: row === STARTING_ROW && col === STARTING_COL,\r\n    isFinish: row === ENDING_ROW && col === ENDING_COL,\r\n    isWeighted: false,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithWeight = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = { ...node, isWeighted: !node.isWeighted }\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n}\r\n\r\n\r\nclass PathFindingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  resetWeight = () => {\r\n    const { grid } = this.state\r\n    for (let row = 0; row < TOTAL_ROW; row++){\r\n      for (let col = 0; col < TOTAL_COL; col++){\r\n        grid[row][col].isWeighted = false;\r\n      }\r\n    }\r\n    let resetWeights = document.querySelector(\".node-weight\")\r\n    if (resetWeights === null) {\r\n      resetWeights = []\r\n    }\r\n    for (let i = 0; i < resetWeights.length; i++){\r\n      resetWeights[i].className = \"node\";\r\n    }\r\n    this.setState({ grid })\r\n  }\r\n  resetPath = () => {\r\n    const { grid } = this.state;\r\n    for (let row = 0; row < TOTAL_ROW; row++) {\r\n      for (let col = 0; col < TOTAL_COL; col++) {\r\n        grid[row][col].isVisited = false;\r\n      }\r\n    }\r\n    const resetPathAnimation = document.querySelectorAll(\".node-shortest-path\");\r\n    const resetVisitedAnimation = document.querySelectorAll(\".node-visited\");\r\n    for (let i = 0; i < resetVisitedAnimation.length; i++) {\r\n      if (resetVisitedAnimation[i].classList[2] === \"node-weight\") {\r\n        resetVisitedAnimation[i].className = \"node node-weight\";\r\n      } else {\r\n        resetVisitedAnimation[i].className = \"node\";\r\n      }\r\n    }\r\n    for (let i = 0; i < resetPathAnimation.length; i++) {\r\n      if (resetPathAnimation[i].classList[2] === \"node-weight\") {\r\n        resetPathAnimation[i].className = \"node node-weight\";\r\n      } else {\r\n        resetPathAnimation[i].className = \"node\";\r\n      }\r\n    }\r\n\r\n    document.getElementById(`node-${STARTING_ROW}-${STARTING_COL}`).className =\r\n      \"node node-start\";\r\n    document.getElementById(`node-${ENDING_ROW}-${ENDING_COL}`).className =\r\n      \"node node-finish\";\r\n  };\r\n\r\n  resetGrid = () => {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n    this.resetPath();\r\n  };\r\n\r\n  handleMouseDown = (row, col) => {\r\n    if (wallOrWeight === \"wall\") {\r\n      if (!this.state.grid[row][col].isFinish) {\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid, mouseIsPressed: true });\r\n      }\r\n    } else if (wallOrWeight === \"weight\") {\r\n      if (!this.state.grid[row][col].isFinish) {\r\n        const newGrid = getNewGridWithWeight(this.state.grid, row, col);\r\n        this.setState({ gird: newGrid, mouseIsPressed: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleMouseEnter = (row, col) => {\r\n    if (wallOrWeight === \"wall\") {\r\n      if (this.state.mouseIsPressed && !this.state.grid[row][col].isFinish) {\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid });\r\n      }\r\n    } else if (wallOrWeight === \"weight\") {\r\n      if (this.state.mouseIsPressed && !this.state.grid[row][col].isFinish) {\r\n        const newGrid = getNewGridWithWeight(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    this.setState({ mouseIsPressed: false });\r\n  };\r\n\r\n  animateShortestPath(nodesInShortestOrder) {\r\n    for (let i = 0; i < nodesInShortestOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n        if (node.isWeighted) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path node-weight\";\r\n        }\r\n        if (node.isStart) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path node-start\";\r\n        } else if (node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path node-finish\";\r\n        }\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  animateAlgo(visitedNodesInOrder, nodesInShortestOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestOrder);\r\n        }, 5 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        setTimeout(() => {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visited\";\r\n          if (node.isWeighted) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node node-visited node-weight\";\r\n          }\r\n          if (node.isStart) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node node-shortest-path node-start\";\r\n          } else if (node.isFinish) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node node-shortest-path node-finish\";\r\n          }\r\n        }, 5);\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-at\";\r\n      }, 5 * i);\r\n    }\r\n  }\r\n\r\n  visualizeAStar = () => {\r\n    let { grid } = this.state;\r\n    const startNode = grid[STARTING_ROW][STARTING_COL];\r\n    const endNode = grid[ENDING_ROW][ENDING_COL];\r\n\r\n    const [forPathReconstruction, visitedNodesInOrder] = A_Star(\r\n      grid,\r\n      startNode,\r\n      endNode\r\n    );\r\n    const nodesInShortestOrder = getNodesInShortestPathOrderAStar(\r\n      grid,\r\n      forPathReconstruction,\r\n      startNode,\r\n      endNode\r\n    );\r\n    this.animateAlgo(visitedNodesInOrder, nodesInShortestOrder);\r\n  };\r\n  visualizeDijkstra = () => {\r\n    let { grid } = this.state;\r\n    const startNode = grid[STARTING_ROW][STARTING_COL];\r\n    const endNode = grid[ENDING_ROW][ENDING_COL];\r\n    const [dist, forPathReconstruction, visitedNodesInOrder] = dijkstra(\r\n      grid,\r\n      startNode\r\n    );\r\n    // console.log([dist, forPathReconstruction, visitedNodesInOrder])\r\n    const nodesInShortestOrder = getNodesInShortestPathOrderDijkstra(\r\n      grid,\r\n      dist,\r\n      forPathReconstruction,\r\n      startNode,\r\n      endNode\r\n    );\r\n    this.animateAlgo(visitedNodesInOrder, nodesInShortestOrder);\r\n  };\r\n\r\n  visualizeBFS = () => {\r\n    \r\n    let { grid } = this.state;\r\n    const startNode = grid[STARTING_ROW][STARTING_COL];\r\n    const endNode = grid[ENDING_ROW][ENDING_COL];\r\n    const [visitedNodesInOrder, forPathReconstruction] = bfs(grid, startNode);\r\n    const nodesInShortestOrder = getNodesInShortestPathOrderBFS(\r\n      grid,\r\n      forPathReconstruction,\r\n      startNode,\r\n      endNode\r\n    );\r\n    this.animateAlgo(visitedNodesInOrder, nodesInShortestOrder);\r\n  };\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <div>\r\n        <Navbars\r\n          visualizeBfs={this.visualizeBFS}\r\n          visualizeDijkstra={this.visualizeDijkstra}\r\n          visualizeAStar={this.visualizeAStar}\r\n          resetGrid={this.resetGrid}\r\n          resetPath={this.resetPath}\r\n          resetWeight={this.resetWeight}\r\n          \r\n        ></Navbars>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {\r\n                    row,\r\n                    col,\r\n                    isStart,\r\n                    isFinish,\r\n                    isWall,\r\n                    isWeighted,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isWall={isWall}\r\n                      isWeighted={isWeighted}\r\n                      onMouseDown={this.handleMouseDown}\r\n                      onMouseEnter={this.handleMouseEnter}\r\n                      onMouseUp={this.handleMouseUp}\r\n                      row={row}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PathFindingVisualizer;\r\n","import { PriortyQueue } from \"./priortyQueue\";\r\nimport {\r\n  gridIndexToArrayIndex,\r\n  neiboursUnvisitedNode,\r\n} from \"./algorithmsHelper\";\r\n\r\n\r\nexport function dijkstra(grid, startNode) {\r\n  const forPathReconstruction = new Array(grid.length * grid[0].length);\r\n  const visitedNodesInOrder = [];\r\n\r\n  const dist = new Array(grid.length * grid[0].length).fill(Infinity);\r\n  dist[gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)] = 0;\r\n  const queue = new PriortyQueue();\r\n  queue.enqueue([startNode.row, startNode.col], 0);\r\n  while (queue.length) {\r\n    let { val, priorty } = queue.dequeue();\r\n    let index = gridIndexToArrayIndex(grid[0].length, val[0], val[1]);\r\n    grid[val[0]][val[1]].isVisited = true;\r\n    if (grid[val[0]][val[1]].isFinish) {\r\n      return [dist, forPathReconstruction, visitedNodesInOrder];\r\n    }\r\n    if (dist[index] < priorty) {\r\n      continue;\r\n    }\r\n\r\n    let neibours = neiboursUnvisitedNode(grid, val, visitedNodesInOrder);\r\n    for (let i = 0; i < neibours.length; i++) {\r\n      let [idx, currDist] = neibours[i];\r\n      let at = gridIndexToArrayIndex(grid[0].length, idx[0], idx[1]);\r\n      if (grid[idx[0]][idx[1]].isVisited) {\r\n        continue;\r\n      }\r\n      let newDist = dist[index] + currDist;\r\n      if (newDist < dist[at]) {\r\n        forPathReconstruction[at] = grid[val[0]][val[1]];\r\n        visitedNodesInOrder.push(grid[val[0]][val[1]]);\r\n        dist[at] = newDist;\r\n        queue.enqueue(idx, newDist);\r\n      }\r\n    }\r\n  }\r\n  return [dist, forPathReconstruction, visitedNodesInOrder];\r\n}\r\n\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(\r\n  grid,\r\n  dist,\r\n  forPathReconstruction,\r\n  startNode,\r\n  endNode\r\n) {\r\n  const at = gridIndexToArrayIndex(grid[0].length, endNode[0], endNode[1]);\r\n  if (dist[at] === Infinity) {\r\n    return [];\r\n  }\r\n  const path = [];\r\n  for (\r\n    let i = endNode;\r\n    i != null;\r\n    i =\r\n   \r\n        forPathReconstruction[gridIndexToArrayIndex(grid[0].length, i.row, i.col)]\r\n  ) {\r\n    path.push(i);\r\n  }\r\n  path.reverse();\r\n  if (path[0] === startNode) {\r\n    console.log(\"DIjkstra Path Length: \", path.length)\r\n    return path;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n","import React from 'react';\nimport PathFindingVisualizer from './components/PathFindingVisualizer/PathFindingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFindingVisualizer></PathFindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
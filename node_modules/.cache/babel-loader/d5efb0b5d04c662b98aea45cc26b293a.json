{"ast":null,"code":"import _slicedToArray from\"F:\\\\Coding\\\\React\\\\path-finding-visualizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"F:\\\\Coding\\\\React\\\\path-finding-visualizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"F:\\\\Coding\\\\React\\\\path-finding-visualizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"F:\\\\Coding\\\\React\\\\path-finding-visualizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"F:\\\\Coding\\\\React\\\\path-finding-visualizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _objectSpread from\"F:\\\\Coding\\\\React\\\\path-finding-visualizer\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import React from\"react\";import Node from\"../Node/Node\";import{Navbars,wallOrWeight}from\"../Navbars/Navbars\";import{bfs,getNodesInShortestPathOrderBFS}from\"../../algorithms/BFS\";import{dijkstra,getNodesInShortestPathOrderDijkstra}from\"../../algorithms/Dijkstra\";import{A_Star,getNodesInShortestPathOrderAStar}from\"../../algorithms/A_Star\";import\"./PathFindingVisualizer.css\";var TOTAL_ROW=26;var TOTAL_COL=56;var STARTING_ROW=13;var STARTING_COL=10;var ENDING_ROW=13;var ENDING_COL=45;var getInitialGrid=function getInitialGrid(){var grid=[];for(var row=0;row<TOTAL_ROW;row++){var currentRow=[];for(var col=0;col<TOTAL_COL;col++){currentRow.push(createNode(row,col));}grid.push(currentRow);}return grid;};var createNode=function createNode(row,col){return{row:row,col:col,isStart:row===STARTING_ROW&&col===STARTING_COL,isFinish:row===ENDING_ROW&&col===ENDING_COL,isWeighted:false,isVisited:false,isWall:false,previousNode:null};};var getNewGridWithWallToggled=function getNewGridWithWallToggled(grid,row,col){var newGrid=grid.slice();var node=newGrid[row][col];var newNode=_objectSpread(_objectSpread({},node),{},{isWall:!node.isWall});newGrid[row][col]=newNode;return newGrid;};var getNewGridWithWeight=function getNewGridWithWeight(grid,row,col){var newGrid=grid.slice();var node=newGrid[row][col];var newNode=_objectSpread(_objectSpread({},node),{},{isWeighted:!node.isWeighted});newGrid[row][col]=newNode;return newGrid;};var PathFindingVisualizer=/*#__PURE__*/function(_React$Component){_inherits(PathFindingVisualizer,_React$Component);var _super=_createSuper(PathFindingVisualizer);function PathFindingVisualizer(props){var _this;_classCallCheck(this,PathFindingVisualizer);_this=_super.call(this,props);_this.resetWeight=function(){var grid=_this.state.grid;for(var row=0;row<TOTAL_ROW;row++){for(var col=0;col<TOTAL_COL;col++){grid[row][col].isWeighted=false;}}var resetWeights=document.querySelector(\".node-weight\");if(resetWeights===null){resetWeights=[];}for(var i=0;i<resetWeights.length;i++){resetWeights[i].className=\"node\";}_this.setState({grid:grid});};_this.resetPath=function(){var grid=_this.state.grid;for(var row=0;row<TOTAL_ROW;row++){for(var col=0;col<TOTAL_COL;col++){grid[row][col].isVisited=false;}}var resetPathAnimation=document.querySelectorAll(\".node-shortest-path\");var resetVisitedAnimation=document.querySelectorAll(\".node-visited\");for(var i=0;i<resetVisitedAnimation.length;i++){if(resetVisitedAnimation[i].classList[2]===\"node-weight\"){resetVisitedAnimation[i].className=\"node node-weight\";}else{resetVisitedAnimation[i].className=\"node\";}}for(var _i=0;_i<resetPathAnimation.length;_i++){if(resetPathAnimation[_i].classList[2]===\"node-weight\"){resetPathAnimation[_i].className=\"node node-weight\";}else{resetPathAnimation[_i].className=\"node\";}}document.getElementById(\"node-\".concat(STARTING_ROW,\"-\").concat(STARTING_COL)).className=\"node node-start\";document.getElementById(\"node-\".concat(ENDING_ROW,\"-\").concat(ENDING_COL)).className=\"node node-finish\";};_this.resetGrid=function(){var grid=getInitialGrid();_this.setState({grid:grid});_this.resetPath();};_this.handleMouseDown=function(row,col){if(wallOrWeight===\"wall\"){if(!_this.state.grid[row][col].isFinish){var newGrid=getNewGridWithWallToggled(_this.state.grid,row,col);_this.setState({grid:newGrid,mouseIsPressed:true});}}else if(wallOrWeight===\"weight\"){if(!_this.state.grid[row][col].isFinish){var _newGrid=getNewGridWithWeight(_this.state.grid,row,col);_this.setState({gird:_newGrid,mouseIsPressed:true});}}};_this.handleMouseEnter=function(row,col){if(wallOrWeight===\"wall\"){if(_this.state.mouseIsPressed&&!_this.state.grid[row][col].isFinish){var newGrid=getNewGridWithWallToggled(_this.state.grid,row,col);_this.setState({grid:newGrid});}}else if(wallOrWeight===\"weight\"){if(_this.state.mouseIsPressed&&!_this.state.grid[row][col].isFinish){var _newGrid2=getNewGridWithWeight(_this.state.grid,row,col);_this.setState({grid:_newGrid2});}}};_this.handleMouseUp=function(){_this.setState({mouseIsPressed:false});};_this.visualizeAStar=function(){_this.resetPath();var grid=_this.state.grid;var startNode=grid[STARTING_ROW][STARTING_COL];var endNode=grid[ENDING_ROW][ENDING_COL];var _A_Star=A_Star(grid,startNode,endNode),_A_Star2=_slicedToArray(_A_Star,2),forPathReconstruction=_A_Star2[0],visitedNodesInOrder=_A_Star2[1];var nodesInShortestOrder=getNodesInShortestPathOrderAStar(grid,forPathReconstruction,startNode,endNode);_this.animateAlgo(visitedNodesInOrder,nodesInShortestOrder);};_this.visualizeDijkstra=function(){_this.resetPath();var grid=_this.state.grid;var startNode=grid[STARTING_ROW][STARTING_COL];var endNode=grid[ENDING_ROW][ENDING_COL];var _dijkstra=dijkstra(grid,startNode),_dijkstra2=_slicedToArray(_dijkstra,3),dist=_dijkstra2[0],forPathReconstruction=_dijkstra2[1],visitedNodesInOrder=_dijkstra2[2];// console.log([dist, forPathReconstruction, visitedNodesInOrder])\nvar nodesInShortestOrder=getNodesInShortestPathOrderDijkstra(grid,dist,forPathReconstruction,startNode,endNode);_this.animateAlgo(visitedNodesInOrder,nodesInShortestOrder);};_this.visualizeBFS=function(){_this.resetPath();var grid=_this.state.grid;var startNode=grid[STARTING_ROW][STARTING_COL];var endNode=grid[ENDING_ROW][ENDING_COL];var _bfs=bfs(grid,startNode),_bfs2=_slicedToArray(_bfs,2),visitedNodesInOrder=_bfs2[0],forPathReconstruction=_bfs2[1];var nodesInShortestOrder=getNodesInShortestPathOrderBFS(grid,forPathReconstruction,startNode,endNode);_this.animateAlgo(visitedNodesInOrder,nodesInShortestOrder);};_this.state={grid:[],mouseIsPressed:false};return _this;}_createClass(PathFindingVisualizer,[{key:\"componentDidMount\",value:function componentDidMount(){var grid=getInitialGrid();this.setState({grid:grid});}},{key:\"animateShortestPath\",value:function animateShortestPath(nodesInShortestOrder){var _loop=function _loop(i){setTimeout(function(){var node=nodesInShortestOrder[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className=\"node node-shortest-path\";if(node.isWeighted){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className=\"node node-shortest-path node-weight\";}if(node.isStart){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className=\"node node-shortest-path node-start\";}else if(node.isFinish){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className=\"node node-shortest-path node-finish\";}},50*i);};for(var i=0;i<nodesInShortestOrder.length;i++){_loop(i);}}},{key:\"animateAlgo\",value:function animateAlgo(visitedNodesInOrder,nodesInShortestOrder){var _this2=this;var _loop2=function _loop2(i){if(i===visitedNodesInOrder.length){setTimeout(function(){_this2.animateShortestPath(nodesInShortestOrder);},5*i);return{v:void 0};}setTimeout(function(){var node=visitedNodesInOrder[i];setTimeout(function(){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className=\"node node-visited\";if(node.isWeighted){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className=\"node node-visited node-weight\";}if(node.isStart){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className=\"node node-shortest-path node-start\";}else if(node.isFinish){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className=\"node node-shortest-path node-finish\";}},5);document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className=\"node node-at\";},5*i);};for(var i=0;i<=visitedNodesInOrder.length;i++){var _ret=_loop2(i);if(typeof _ret===\"object\")return _ret.v;}}},{key:\"render\",value:function render(){var _this3=this;var grid=this.state.grid;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Navbars,{visualizeBfs:this.visualizeBFS,visualizeDijkstra:this.visualizeDijkstra,visualizeAStar:this.visualizeAStar,resetGrid:this.resetGrid,resetPath:this.resetPath,resetWeight:this.resetWeight}),/*#__PURE__*/React.createElement(\"div\",{className:\"grid\"},grid.map(function(row,rowIdx){return/*#__PURE__*/React.createElement(\"div\",{key:rowIdx},row.map(function(node,nodeIdx){var row=node.row,col=node.col,isStart=node.isStart,isFinish=node.isFinish,isWall=node.isWall,isWeighted=node.isWeighted;return/*#__PURE__*/React.createElement(Node,{key:nodeIdx,col:col,isStart:isStart,isFinish:isFinish,isWall:isWall,isWeighted:isWeighted,onMouseDown:_this3.handleMouseDown,onMouseEnter:_this3.handleMouseEnter,onMouseUp:_this3.handleMouseUp,row:row});}));})));}}]);return PathFindingVisualizer;}(React.Component);export default PathFindingVisualizer;","map":{"version":3,"sources":["F:/Coding/React/path-finding-visualizer/src/components/PathFindingVisualizer/PathFindingVisualizer.jsx"],"names":["React","Node","Navbars","wallOrWeight","bfs","getNodesInShortestPathOrderBFS","dijkstra","getNodesInShortestPathOrderDijkstra","A_Star","getNodesInShortestPathOrderAStar","TOTAL_ROW","TOTAL_COL","STARTING_ROW","STARTING_COL","ENDING_ROW","ENDING_COL","getInitialGrid","grid","row","currentRow","col","push","createNode","isStart","isFinish","isWeighted","isVisited","isWall","previousNode","getNewGridWithWallToggled","newGrid","slice","node","newNode","getNewGridWithWeight","PathFindingVisualizer","props","resetWeight","state","resetWeights","document","querySelector","i","length","className","setState","resetPath","resetPathAnimation","querySelectorAll","resetVisitedAnimation","classList","getElementById","resetGrid","handleMouseDown","mouseIsPressed","gird","handleMouseEnter","handleMouseUp","visualizeAStar","startNode","endNode","forPathReconstruction","visitedNodesInOrder","nodesInShortestOrder","animateAlgo","visualizeDijkstra","dist","visualizeBFS","setTimeout","animateShortestPath","map","rowIdx","nodeIdx","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Node from \"../Node/Node\";\r\nimport { Navbars, wallOrWeight} from \"../Navbars/Navbars\";\r\nimport { bfs, getNodesInShortestPathOrderBFS } from \"../../algorithms/BFS\";\r\nimport {\r\n  dijkstra,\r\n  getNodesInShortestPathOrderDijkstra,\r\n} from \"../../algorithms/Dijkstra\";\r\nimport {\r\n  A_Star,\r\n  getNodesInShortestPathOrderAStar,\r\n} from \"../../algorithms/A_Star\";\r\n\r\nimport \"./PathFindingVisualizer.css\";\r\n\r\nconst TOTAL_ROW = 26;\r\nconst TOTAL_COL = 56;\r\n\r\nconst STARTING_ROW = 13;\r\nconst STARTING_COL = 10;\r\n\r\nconst ENDING_ROW = 13;\r\nconst ENDING_COL = 45;\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < TOTAL_ROW; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < TOTAL_COL; col++) {\r\n      currentRow.push(createNode(row, col));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  \r\n  return grid;\r\n};\r\n\r\nconst createNode = (row, col) => {\r\n  \r\n  return {\r\n    row,\r\n    col,\r\n    isStart: row === STARTING_ROW && col === STARTING_COL,\r\n    isFinish: row === ENDING_ROW && col === ENDING_COL,\r\n    isWeighted: false,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithWeight = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = { ...node, isWeighted: !node.isWeighted }\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n}\r\n\r\n\r\nclass PathFindingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  resetWeight = () => {\r\n    const { grid } = this.state\r\n    for (let row = 0; row < TOTAL_ROW; row++){\r\n      for (let col = 0; col < TOTAL_COL; col++){\r\n        grid[row][col].isWeighted = false;\r\n      }\r\n    }\r\n    let resetWeights = document.querySelector(\".node-weight\")\r\n    if (resetWeights === null) {\r\n      resetWeights = []\r\n    }\r\n    for (let i = 0; i < resetWeights.length; i++){\r\n      resetWeights[i].className = \"node\";\r\n    }\r\n    this.setState({ grid })\r\n  }\r\n  resetPath = () => {\r\n    const { grid } = this.state;\r\n    for (let row = 0; row < TOTAL_ROW; row++) {\r\n      for (let col = 0; col < TOTAL_COL; col++) {\r\n        grid[row][col].isVisited = false;\r\n      }\r\n    }\r\n    const resetPathAnimation = document.querySelectorAll(\".node-shortest-path\");\r\n    const resetVisitedAnimation = document.querySelectorAll(\".node-visited\");\r\n    for (let i = 0; i < resetVisitedAnimation.length; i++) {\r\n      if (resetVisitedAnimation[i].classList[2] === \"node-weight\") {\r\n        resetVisitedAnimation[i].className = \"node node-weight\";\r\n      } else {\r\n        resetVisitedAnimation[i].className = \"node\";\r\n      }\r\n    }\r\n    for (let i = 0; i < resetPathAnimation.length; i++) {\r\n      if (resetPathAnimation[i].classList[2] === \"node-weight\") {\r\n        resetPathAnimation[i].className = \"node node-weight\";\r\n      } else {\r\n        resetPathAnimation[i].className = \"node\";\r\n      }\r\n    }\r\n\r\n    document.getElementById(`node-${STARTING_ROW}-${STARTING_COL}`).className =\r\n      \"node node-start\";\r\n    document.getElementById(`node-${ENDING_ROW}-${ENDING_COL}`).className =\r\n      \"node node-finish\";\r\n  };\r\n\r\n  resetGrid = () => {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n    this.resetPath();\r\n  };\r\n\r\n  handleMouseDown = (row, col) => {\r\n    if (wallOrWeight === \"wall\") {\r\n      if (!this.state.grid[row][col].isFinish) {\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid, mouseIsPressed: true });\r\n      }\r\n    } else if (wallOrWeight === \"weight\") {\r\n      if (!this.state.grid[row][col].isFinish) {\r\n        const newGrid = getNewGridWithWeight(this.state.grid, row, col);\r\n        this.setState({ gird: newGrid, mouseIsPressed: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleMouseEnter = (row, col) => {\r\n    if (wallOrWeight === \"wall\") {\r\n      if (this.state.mouseIsPressed && !this.state.grid[row][col].isFinish) {\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid });\r\n      }\r\n    } else if (wallOrWeight === \"weight\") {\r\n      if (this.state.mouseIsPressed && !this.state.grid[row][col].isFinish) {\r\n        const newGrid = getNewGridWithWeight(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    this.setState({ mouseIsPressed: false });\r\n  };\r\n\r\n  animateShortestPath(nodesInShortestOrder) {\r\n    for (let i = 0; i < nodesInShortestOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n        if (node.isWeighted) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path node-weight\";\r\n        }\r\n        if (node.isStart) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path node-start\";\r\n        } else if (node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path node-finish\";\r\n        }\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  animateAlgo(visitedNodesInOrder, nodesInShortestOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestOrder);\r\n        }, 5 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        setTimeout(() => {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visited\";\r\n          if (node.isWeighted) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node node-visited node-weight\";\r\n          }\r\n          if (node.isStart) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node node-shortest-path node-start\";\r\n          } else if (node.isFinish) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node node-shortest-path node-finish\";\r\n          }\r\n        }, 5);\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-at\";\r\n      }, 5 * i);\r\n    }\r\n  }\r\n\r\n  visualizeAStar = () => {\r\n    this.resetPath();\r\n    let { grid } = this.state;\r\n    const startNode = grid[STARTING_ROW][STARTING_COL];\r\n    const endNode = grid[ENDING_ROW][ENDING_COL];\r\n\r\n    const [forPathReconstruction, visitedNodesInOrder] = A_Star(\r\n      grid,\r\n      startNode,\r\n      endNode\r\n    );\r\n    const nodesInShortestOrder = getNodesInShortestPathOrderAStar(\r\n      grid,\r\n      forPathReconstruction,\r\n      startNode,\r\n      endNode\r\n    );\r\n    this.animateAlgo(visitedNodesInOrder, nodesInShortestOrder);\r\n  };\r\n  visualizeDijkstra = () => {\r\n    this.resetPath();\r\n    let { grid } = this.state;\r\n    const startNode = grid[STARTING_ROW][STARTING_COL];\r\n    const endNode = grid[ENDING_ROW][ENDING_COL];\r\n    const [dist, forPathReconstruction, visitedNodesInOrder] = dijkstra(\r\n      grid,\r\n      startNode\r\n    );\r\n    // console.log([dist, forPathReconstruction, visitedNodesInOrder])\r\n    const nodesInShortestOrder = getNodesInShortestPathOrderDijkstra(\r\n      grid,\r\n      dist,\r\n      forPathReconstruction,\r\n      startNode,\r\n      endNode\r\n    );\r\n    this.animateAlgo(visitedNodesInOrder, nodesInShortestOrder);\r\n  };\r\n\r\n  visualizeBFS = () => {\r\n    this.resetPath();\r\n    \r\n    let { grid } = this.state;\r\n    const startNode = grid[STARTING_ROW][STARTING_COL];\r\n    const endNode = grid[ENDING_ROW][ENDING_COL];\r\n    const [visitedNodesInOrder, forPathReconstruction] = bfs(grid, startNode);\r\n    const nodesInShortestOrder = getNodesInShortestPathOrderBFS(\r\n      grid,\r\n      forPathReconstruction,\r\n      startNode,\r\n      endNode\r\n    );\r\n    this.animateAlgo(visitedNodesInOrder, nodesInShortestOrder);\r\n  };\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <div>\r\n        <Navbars\r\n          visualizeBfs={this.visualizeBFS}\r\n          visualizeDijkstra={this.visualizeDijkstra}\r\n          visualizeAStar={this.visualizeAStar}\r\n          resetGrid={this.resetGrid}\r\n          resetPath={this.resetPath}\r\n          resetWeight={this.resetWeight}\r\n          \r\n        ></Navbars>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {\r\n                    row,\r\n                    col,\r\n                    isStart,\r\n                    isFinish,\r\n                    isWall,\r\n                    isWeighted,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isWall={isWall}\r\n                      isWeighted={isWeighted}\r\n                      onMouseDown={this.handleMouseDown}\r\n                      onMouseEnter={this.handleMouseEnter}\r\n                      onMouseUp={this.handleMouseUp}\r\n                      row={row}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PathFindingVisualizer;\r\n"]},"metadata":{},"sourceType":"module"}